[tool.poetry]
name = "ogscope"
version = "0.1.0"
description = "电子极轴镜 - 基于 Raspberry Pi Zero 2W 和 IMX327 MIPI 的智能极轴校准系统"
authors = ["一灰 <isyifeilu@icloud.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/your-username/OGScope"
repository = "https://github.com/your-username/OGScope"
documentation = "https://github.com/your-username/OGScope/docs"
keywords = ["astronomy", "polar-alignment", "astrophotography", "raspberry-pi", "mipi-camera"]
packages = [{include = "ogscope"}]

[tool.poetry.dependencies]
python = "^3.10"

# Web 框架 - FastAPI
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
python-multipart = "^0.0.9"  # 文件上传支持
jinja2 = "^3.1.3"            # 模板引擎
websockets = "^12.0"         # WebSocket 支持
aiofiles = "^23.2.1"         # 异步文件操作

# 图像处理
numpy = ">=2,<3"
opencv-python-headless = ">=4.12,<5"
pillow = ">=10,<13"

# 相机支持 (Raspberry Pi MIPI)
# picamera2 = "^0.3.0"       # 树莓派 MIPI 相机支持 (仅Linux)
# 备选: opencv-python (用于图像处理)

# 天文计算
astropy = "^6.0.0"
skyfield = "^1.48"
python-dateutil = "^2.8.2"

# SPI 屏幕支持 (仅Linux)
# spidev = "^3.6"            # 仅Linux系统
# adafruit-circuitpython-rgb-display = "^3.12.0"  # 根据实际屏幕型号选择
# luma.lcd = "^2.10.0"       # 备选方案

# 数据库
sqlalchemy = "^2.0.0"
alembic = "^1.13.0"          # 数据库迁移

# 配置管理
pydantic = "^2.6.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.1"

# GPIO (如果需要按键等，仅Linux)
# gpiod = "^2.1.0"           # Python 3.9+ GPIO 库 (仅Linux)

# 日志和监控
loguru = "^0.7.2"            # 更好的日志库

# INDI 集成 (Phase 3)
# pyindi-client = "^1.9.0"

[tool.poetry.group.dev.dependencies]
# 测试
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.26.0"            # FastAPI 测试客户端

# 代码质量
black = "^24.1.0"
ruff = "^0.2.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

# 类型检查相关
types-python-dateutil = "^2.8.19"
types-pillow = "^10.2.0"

# 调试
ipython = "^8.12.0"
ipdb = "^0.13.13"

[tool.poetry.scripts]
ogscope = "ogscope.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ====================
# 工具配置
# ====================

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # 允许未使用的导入

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # 逐步启用
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=ogscope --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: 标记运行较慢的测试",
    "hardware: 需要实际硬件的测试",
    "integration: 集成测试",
    "unit: 单元测试",
]

[tool.coverage.run]
source = ["ogscope"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/main.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

